[h2][h2/]
فصل اول: متغیرها، عبارات و جمله ها
[/h2]

[h3][h3/]
مقادیر و نوع ها
[/h3]

[p][p/]
مقدار (value) یکی از چیز های پایه می باشد که یک برنامه با آن سر و کار دارد، مانند 
یک حرف یا یک عدد. 
[/p]

[p][p/]
این مقادیر متعلق به نوع های مختلفی می باشد: عدد 2 یک integer می باشد، و 'Hello, World!' یک رشته، زیرا رشته ای از حروف می باشد.
شما (و مفسر) می توانید رشته ها را تشخیص دهید چرا رشته ها درون علامت کتیشن قرار می گیرند.
[/p]

[p][p/]
در صورتی که نوع یک مقدار را نمی دانید مفسر می تواند به شما نوع آن مقدار را نشان دهد.
[/p]

[code]
>>> type('Hello, World!')
<type 'str'>
>>> type(17)
<type 'int'>
[/code]

[p][p/]
موضوع عجیبی نیست، رشته ها متعلق به نوع str و اعداد متعلق به نوع int می باشند.
بدیهی است که اعداد اعشاری متعلق به نوع float می باشند. چرا که این اعداد در قالب اعشاری نمایش داده می شوند.
[/p]

[code]
>>> type(3.2)
<type 'float'>
[/code]

[p][p/]
گاهی اوقات مقادیر به شکل '17' و یا '3.2' نمایش داده می شوند، تکلیف این مقادیر چه می شود؟
این مقادیر شبیه به اعداد هستند، ولی درون علامت کتیشن قرار گرفته اند مانند رشته ها.
[/p]

[code]
>>> type('17')
<type 'str'>
>>> type('3.2')
<type 'str'>
[/code]

[p][p/]
نوع این نوع مقادیر نیز رشته می باشد.
[/p]

[p][p/]
زمانی که می خواهید یک عدد طولانی را تایپ کنید، ممکن است بخواهید بین آن رقم سه رقم از 
کاما استفاده کنید، مانند 1,000,000. این یک نوع integer قانونی در پایتون به شمار نمی آید، 
ولی موردی نخواهد داشت:
[/p]

[code]
>>> 1,000,000
(1, 0, 0)
[/code]

[p][p/]
خوب، خروجی فوق به هیچ وجه چیزی نیست که ما انتظار داشتیم! پایتون 1,000,000 را ترتیبی از integer های جدا شده توسط کاما تفسیر می کند. 
این اولین مثال خطای معنایی است که مشاهده کردیم: کد بدون تولید هیج پیام خطایی اجرا می شود، 
ولی کاری درست را انجام نی دهد.
[/p]

[h3][h3/]
متغیرها
[/h3]

[p][p/]
یکی از قدرتمند ترین خصوصیات یک زبان برنامه نویسی توانایی مدیریت متغیرها می باشد. 
متغیر نامی است که به یک مقدار نسبت داده می شود.
[/p]

[p][p/]
یک عبارت مقدار دهی، متغیرهای جدید را ایجاد و به آن ها مقادیر می دهد.
[/p]

[code]
>>> message = 'And now for something completely different'
>>> n = 17
>>> pi = 3.1415926535897932
[/code]

[p][p/]
مثال فوق سه مورد مقدار دهی را نشان می دهد. اولی متغیری با نام message را مقدار دهی می کند. 
دومی عدد 17 را درون n می ریزد و سومی مقدار تقریبی عدد π را درون pi می ریزد.
[/p]

[p][p/]
رایج ترین روش برای نمایش متغیرها بر روی کاغذ، نوشتن نام نام متغیر به همراه یک پیکان که به مقدار متغیر اشاره می کند می باشد. 
این حالت نمایش را state diagram می نامند، به این دلیل که در این حالت وضعیتی که هر متغیر در آن است را نشان می دهد. 
شکل 1.1 نتیجه مثال قبل را نشان می دهد.
[/p]

[image]شکل 1-1[image/]
[img]src='/statics/images/1-1.png' width='100%'[img/]
[/image]

[p][p/]
در واقع نوع یک متغیر، نوع مقداری است که به آن متغیر نسبت داده شده است.
[/p]

[code]
>>> type(message)
<type 'str'>
>>> type(n)
<type 'int'>
>>> type(pi)
<type 'float'>
[/code]

[h4][h4/]
تمرین 1
[/h4]

[p][p/]
در صورتی که یک مقدار integer را با یک صفر در اول آن تایپ کنید، ممکن است با یک خطای گیچ کننده مواجه شوید:
[/p]

[code]
>>> zipcode = 02492
                  ^
SyntaxError: invalid token
[/code]

[p][p/]
اعداد دیگری با این حالت به نظر می رسد بدون خطا کار می کنند، ولی خروجی عجیب و غریب است:
[/p]

[code]
>>> zipcode = 02132
>>> zipcode
1114
[/code]

[p][p/]
آیا می توانید بیابید که موضوع از چه قرار است؟ اشاره: مقادیر 01، 010، 0100 و 01000 را در خروجی امتحان کنید.
[/p]


[h3][h3/]
نام متغیرها و کلمات کلیدی
[/h3]

[p][p/]
برنامه نویسان معمولا اسامی معناداری برای متغیرهای خود انتخاب می کنند، 
آن ها دلیل استفاده هر متغیر را توضیح می دهند.
[/p]

[p][p/]
نام متغیر می تواند به طور دلخواه نامی بلند باشد. نام متغیر می تواند ترکیبی از حروف 
و عدد باشد، ولی نام متغیر می بایست با حرف شروع شود. 
It is legal to use uppercase letters, but it is a good idea to begin variable names with a lowercase letter (you’ll see why later).
[/p]

[p][p/]
می توان از کاراکتر خط تیره (ـ) درون نام متغیر استفاده کرد. این کاراکتر معمولا 
برای نام هاییی که در آن ها چندین لغت به کار رفته استفاده می شود مانند 
my_name یا airspeed_of_unladen_swallow
[/p]

[p][p/]
در صورتی از یک نام غیر قانونی درون کد استفاده کنید، با خطای syntax مواجه خواهید شد.
[/p]

[code]
>>> 76trombones = 'big parade'
SyntaxError: invalid syntax
>>> more@ = 1000000
SyntaxError: invalid syntax
>>> class = 'Advanced Theoretical Zymurgy'
SyntaxError: invalid syntax
[/code]

[p][p/]
متغیر 76trombones به دلیل اینکه با حرف شروع نشده است نامی غیر قانونی است.
متغیر more@ به دلیل اینکه دارای یک کاراکتر غیر قانونی است استفاده از جایز نیس. 
ولی مشکل متغیر class چیست؟
[/p]

[p][p/]
نام class یکی از کلمات کلیدی پایتون می باشد. 
مفسر از کلمات کلیدی برای تشخیص ساختار برنامه استفاده می کند، 
و کلامت کلیدی نمی توانند برای نام متغیر استفاده شوند.
[/p]

[p][p/]
پایتون نسخه 2 دارای 31 کلمه کلیدی می باشد:
[/p]

[code]
and       del       from      not       while    
as        elif      global    or        with     
assert    else      if        pass      yield    
break     except    import    print              
class     exec      in        raise              
continue  finally   is        return             
def       for       lambda    try
[/code]

[p][p/]
در پایتون نسخه 3، exec دیگر یک کلمه کلیدی نبوده، ولی nonlocal یک کلمه کلیدی می باشد.
[/p]

[p][p/]
ممکن است نگه داشتن این لیست را برای خود سودمند بدانید. در صورتی که مفسر در مورد نام 
یکی از متغیرهای شما شروع به ایراد گرفتن کرد و شما دلیل آن را نتوانستید تشخیص دهید، 
می توانید نگاهی به لیست بیاندازید.
[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

