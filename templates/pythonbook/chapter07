[h2][h2/]
فصل هفتم: رشته ها
[/h2]

[h3][h3/]
رشته یک ترتیب است
[/h3]

[p][p/]
رشته ترتیبی از کارکترها می باشد. شما می توانید با استفاده از علامت کروشه به کارکترهای 
درون رشته دسترسی پیدا کنید:
[/p]

[code]
>>> fruit = 'banana'
>>> letter = fruit[1]
[/code]

[p][p/]
خط دوم مثال فوق کارکتر اول fruit را انتخاب کرده و آن را درون letter می ریزد.
[/p]

[p][p/]
عبارت درون کروشه را اندیس می نامند. اندیس به کاراکترهای درون یک ترتیب اشاره می کند.
[/p]

[p][p/]
ولی ممکن است چیزی را انتظار خواهید داشت را دریافت نکنید:
[/p]

[code]
>>> print letter
a
[/code]

[p][p/]
برای اکثر افراد، اولین حرف از کلمه 'banana' حرف b می باشد، نه حرف a.
ولی در علوم کامپیوتر اندیس اولین قسمت از رشته می باشد، و اولین قسمت صفر می باشد.
[/p]

[code]
>>> letter = fruit[0]
>>> print letter
b
[/code]

[p][p/]
بنابراین شاید بتوان به حالت طنز گفت که b صفرومین حرف 'banana' می باشد، 
a اولین و n نیز دومین حرف آن می باشد.
[/p]

[p][p/]
شما می توانید برای اندیس از هر عبارتی، شال متغیرها و عملگرهای استفاده کنید، 
ولی باید بخاطر داشت مقدار اندیس باید یک integer باشد، در غیر این صورت شما خطای زیر را دریافت خواهید کرد:
[/p]

[code]
>>> letter = fruit[1.5]
TypeError: string indices must be integers
[/code]

[h3][h3/]
len
[/h3]

[p][p/]
len یک تابع داخلی پایتون می باشد که تعداد کاراکترهای موجود در یک رشته را بر می گرداند.
[/p]

[code]
>>> fruit = 'banana'
>>> len(fruit)
6
[/code]

[p][p/]
برای بدست آوردن آخرین حرف یک رشته، شما ممکن است همچین کاری را انجام دهید:
[/p]

[code]
>>> length = len(fruit)
>>> last = fruit[length]
IndexError: string index out of range
[/code]

[p][p/]
دلیل خطای فوق این است که هیچ در 'banana' با اندیس 6 وجود ندارد. به این دلیل که ما 
شمارش را از صفر شروع کردیم 6 حرف مورد نظر از 0 تا 5 شماره گذاری شده اند.
برای بدست آوردن آخرین کاراکتر، شما باید یک واحد از lenght کم کنید.
[/p]

[code]
>>> last = fruit[length-1]
>>> print last
a
[/code]

[p][p/]
همچنین شما می توانید از اندیس های منفی استفاده کنید، که به صورت بر عکس، یعنی 
از ابتدا به انتها رشته را شمارش می کند. عبارت fruit[-1] نشان دهنده اندیس آخر، 
fruit[-2] نشان دهنده اندیس یکی مانده به آخر می باشد و الی آخر ...
[/p]

[h3][h3/]
پیمایش با حلقه for
[/h3]

[p][p/]
بسیاری از محاسبات نیاز به پردازش رشته دارند به طوری بتوانند در هربار یکی از کاراکترهای 
رشته را در اختیار داشته باشند و به نوبت هر کاراکتر را انتخاب کرده و کاری را روی آن 
انجام دهند و این موضوع را تا پایان رشته ادامه دهند. این الگوی پردازش پیمایش نام دارد. 
یکی از راه های نوشتن پیمایش استفاده از حلقه while می باشد:
[/p]

[code]
index = 0
while index < len(fruit):
    letter = fruit[index]
    print letter
    index = index + 1
[/code]

[p][p/]
این حلقه رشته را پیمایش کره و حروف داخل رشته را جدا جدا نمایش می دهد. شرط حلقه 
index < len(fruit) می باشد، بنابراین زمانی که index برابر با طول رشته شود، شرط 
False می شود، و بدنه حلقه دیگر اجرا نخواهد شد. آخرین کاراکتر مورد دسترسی اندیس 
len(fruti) - 1 می باشد، که آخرین کاراکتر رشته خواهد بود.
[/p]

[h4][h4/]
تمرین 1
[/h4]

[p][p/]
تابعی بنویسید که یک رشته را به عنوان آرگومان دریافت کرده و حروف آن را به صورت وارونه 
نمایش دهد.
[/p]

[p][p/]
روش دیگر نوشتن یک پیمایش با استفاده از حلقه for می باشد:
[/p]

[code]
for char in fruit:
    print char
[/code]

[p][p/]
هر بار درون حلقه، کاراکتر بعدی درون رشته به متغیر char نسبت داده می شود. 
حلقه تا جایی ادامه پیدا می کند که دیگر هیچ کارکتری درون رشته باقی نماند.
[/p]

[p][p/]
مثال زیر نحوه استفاده از به هم متصل کردن رشته و یک حلقه for برای تولید یک سری حروف
به ترتیب حروف الفبا را نشان می دهد. در کتاب make Way for Ducklings اثر Robert McCloskey 
نام جوجه اردک ها Jack، Kack، Lack، Mak، Nack، Ouack، Pack و Ouack می باشد، 
خروجی حلقه زیر این نام ها را به ترتیب چاپ می کند.
[/p]

[code]
prefixes = 'JKLMNOPQ'
suffix = 'ack'

for letter in prefixes:
    print letter + suffix
The output is:
Jack
Kack
Lack
Mack
Nack
Oack
Pack
Qack
[/code]

[p][p/]
البته، خروجی به طور کامل صحیح نیست، "Oauck" و "Quack" از نظر املایی غلط می باشند.
[/p]

[h4][h4/]
تمرین 2
[/h4]

[p][p/]
کد فوق را جهت رفع مشکل اصلاح کنید.
[/p]

[h3][h3/]
برش های رشته
[/h3]

[p][p/]
یک بند از یک رشته را یک برش می گویند. انتخاب یک برش، دقیقا انتخاب یک کاراکتر است.
[/p]

[code]
>>> s = 'Monty Python'
>>> print s[0:5]
Monty
>>> print s[6:12]
Python
[/code]

[p][p/]
عملگر [n:m] بخشی از رشته یعنی رشته را از کاراکتر n تا بر می گرداند، که شامل اولین برش 
یعنی عدد n می شود، ولی شامل m نمی شود. این رفتار کمی عجیب به نظر می رشد، 
ولی ممکن است همانطور که در تصویر 8-1 مشاهده می کنید به این تصور کمک کند که نقطه اندیس بین کارکترها می باشد.
[/p]

[image]شکل 1-8[image/]
[img]src='/statics/images/8-1.png' width='100%'[img/]
[/image]

[p][p/]
در صورتیکه اندیس اول (قبل از : را) از قلم بیاندازید، برش از ابتدا رشته شروع می کند و 
همچنین در صورتیکه اندیس دوم را از قلم بیاندازید، برش تا انتهای رشته ادامه پیدا می کند.
[/p]

[code]
>>> fruit = 'banana'
>>> fruit[:3]
'ban'
>>> fruit[3:]
'ana'
[/code]

[p][p/]
در صورتیکه اندیس اول بزرگتر یا مساوی اندیس دوم باشد، نتیجه یک رشته خالی خواهد بود که درون 
علامت کتیشن قرار خواهد گرفت.
[/p]

[code]
>>> fruit = 'banana'
>>> fruit[3:3]
''
[/code]

[p][p/]
یک رشته خالی حاوی هیچ کارکتری نبوده و طول آن 0 می باشد، ولی با این حال مانند باقی رشته ها خواهد بود.
[/p]

[h3][h3/]
رشته ها تغییر ناپذیر هستند
[/h3]

[p][p/]
به نظر وسوسه انگیز می رسد به منظور تغییر یک کاراکتر در رشته از عملگر [] در سمت چپ یک انتساب استفاده کرد 
برای مثال:
[/p]

[code]
>>> greeting = 'Hello, world!'
>>> greeting[0] = 'J'
TypeError: object does not support item assignment
[/code]

[p][p/]
"object" در مثال فوق رشته و "item" کارکتری است که انتساب داده شده است. 
فعلا یک آبجکت همان مقدار می باشد، ولی بعدا آبجکت را به تفصیل توضیح خواهیم داد. item 
یکی از مقادیر موجود در ترتیب (sequence) می باشد.
[/p]

[p][p/]
دلیل خطای فوق این که است که رشته تغییر ناپذیر است، بدین معنی که نمی توان یک رشته موجود 
را تغییر داد. بهترین راهکار استفاده از یک رشته جدید است.
[/p]

[code]
>>> greeting = 'Hello, world!'
>>> new_greeting = 'J' + greeting[1:]
>>> print new_greeting
Jello, world!
[/code]

[p][p/]
مثال فوق یک حرف جدید را به عنوان اولین حرف به برش greeting متصل می کند. انتساب فوق 
هیچ تاثیری بر رشته اصلی ندارد.
[/p]

[h3][h3/]
جستجو کردن
[/h3]

[p][p/]
تابع زیر چه کاری انجام می دهد؟
[/p]

[code]
def find(word, letter):
    index = 0
    while index < len(word):
        if word[index] == letter:
            return index
        index = index + 1
    return -1
[/code]

[p][p/]
در یک معنا، تابع فوق نقطه مقابل عملگر [] می باشد، بدین معنی که، به جای اینکه یک اندیس را 
گرفته و کاراکتر مرتبط با آن را بر گرداند، یک کاراکتر را گرفته و اندیس مربوط به کاراکتر را بر 
می گرداند. در صورتیکه کاراکتر مورد نظر پیدا نشود تابع -1 بر می گرداند.
[/p]

[p][p/]
این اولین مثالی است که جمله return درون حلقه قرار گرفته است. در صورتیکه 
word[index] == letter باشد، تابع حلقه را شکسته و به سرعت برگردانده می شود.
[/p]

[p][p/]
در صورتیکه کاراکتر در رشته وجود نداشته باشد، برنامه به طور عادی از حلقه خارج شده و -1 را بر می گرداند.
[/p]

[p][p/]
این توع الگوی محاسبه یعنی: پیمایش یک ترتیب و برگرداندن، هنگامی که چیزی که به دنبالش می باشیم را پیدا کردیم را 
جستجو می نامند.
[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]