[h2][h2/]
فایل ها
[/h2]

[h3][h3/]
ماندگاری داده ها
[/h3]

[p][p/]
اغلب برنامه هایی که تا به حال دیده ایم برنامه هایی گذرا هستند، به این معنی که این برنامه ها برای مدت زمان کوتاهی اجرا می شوند و برای خود خروجی تولید می کنند، ولی وقتی برنامه به پایان می رسد، تمامی داده ها از بین می روند. در صورتی که برنامه را دوباره اجرا کنید، برنامه خالی از هرگونه داده خواهد بود.
[/p]

[p][p/]
ولی برنامه های دیگر به اصطلاح [ب]ماندگار[/ب] هستند: این برنامه ها حداقل برخی از داده های خود را درون یک مخزنی (به عنوان مثال، هارد درایو) ذخیره می کنند؛ و در صورتی که برنامه خاموش یا دوباره راه اندازی شود، داده های خود را برای استفاده در اختیار خواهند داشت.
[/p]

[p][p/]
از جمله برنامه های مانگار می تواند سیستم عامل ها را نام برد، که به خوبی تا هر زمان که کامپیوتر در روشن است اجرا می شوند، و وب سرور ها در تمام مدت در حال اجرا بوده و منتظر درخواست هایی که از شبکه می آید می باشند.
[/p]

[p][p/]
یکی از ساده ترین روش ها برای برنامه ها جهت مدیریت داده هایشان خواندن و نوشتن درون فایل متنی می باشد. پیش تر با برنامه هایی که فایل های متنی را می خوانند آشنا شده ایم؛ در این فصل با نوشتن بر روی فایل ها آشنا خواهید شد.
[/p]

[p][p/]
روش دیگر، ذخیره داده های یک برنامه درون یک دیتابیس می باشد. در این فصل یک دیتابیس ساده و یک ماژول به نام pickle را برای ذخیره داده های یک برنامه نشان خواهیم داد.
[/p]

[h3][h3/]
خواندن و نوشتن درون فایل
[/h3]

[p][p/]
فایل متنی ترتیبی از کارکترهای ذخیره شده در یک هارد دائمی مانند هارد درایو، فلش یا CD-ROM می باشد. نحوه باز کردن و خواندن فایل را در فصل بازی با کلمات آشنا شدیم.
[/p]

[p][p/]
برای نوشتن بر روی فایل، باید از 'w' به عنوان پارامتر دوم در تابع open استفاده کرد:
[/p]

[code]
>>> fout = open('output.txt', 'w')
>>> print fout
<open file 'output.txt', mode 'w' at 0xb7eb2410>
[/code]

[p][p/]
در صورتی که فایل مورد نظر وجود داشته باشد، باز کردن آن در حالت نوشتن ('w')، داده های قبلی را به طور کامل پاک کرده و یک فایل جدید را ایجاد می کند، بنابراین در این مورد باید کمی مواظب باشید! در صورتیکه فایل وجود نداشته باشد نیز یک فایل جدید ساخته می شود.
[/p]

[p][p/]
متد write داده ها را درون فایل قرار می دهد.
[/p]

[code]
>>> line1 = "This here's the wattle,\n"
>>> fout.write(line1)
[/code]

[p][p/]
آبجکت فایل جایی را که قرار دارد را درون خود نگه می دارد، بنابراین در صورتیکه متد write را دوباره فراخوانی کنید، داده مورد نظر دوباره به انتهای فایل اضافه می شود.
[/p]

[code]
>>> line2 = "the emblem of our land.\n"
>>> fout.write(line2)
[/code]

[p][p/]
هنگامی که نوشتن بر روی فایل خاتمه یافت، باید فایل را با استفاده از متد close ببندید.
[/p]

[code]
>>> fout.close()
[/code]

[h3][h3/]
عملگر فرمت (%)
[/h3]

[p][p/]
آرگومان write باید یک رشته باشد، بنابراین در صورتیکه بخواهیم مقادیر دیگری غیر ار رشته به متد write ارسال کنید، باید آن مقدار را به رشته تبدیل کنیم. ساده ترین راه استفاده از تابع str می باشد:
[/p]

[code]
>>> x = 52
>>> f.write(str(x))
[/code]

[p][p/]
روش دیگر برای تبدیل مقادیر دیگر به رشته، استفاده از [ب]عملگر فرمت (%)[/ب] می باشد. در صورتیکه از این عملگر برای یک مقدار integer استفاده شود، کارکرد آن به شکل عملگر modulus (باقی مانده تقسیم) خواهد بود. ولی هنگامی که برای یک مقدار رشته از این عملگر استفاده شود به صورت عملگر فرمت رفتار خواهد کرد.
[/p]

[p][p/]
اولی عملوند در این حالت [ب]فرمت رشته[/ب] می باشد، که حاوی یک یا چندین ترتیب فرمت می باشد و تعیین می کند که عملوند دوم به چه صورت قالب بندی شود.
[/p]

[p][p/]
برای مثال، '%d' بدین معنی است که عملوند دوم باید یک integer باشد (d مخفف decimal است):
[/p]

[code]
>>> camels = 42
>>> '%d' % camels
'42'
[/code]

[p][p/]
نتیجه رشته '42' است، که هیچ تداخلی با 42 که یک integer است ندارد.
[/p]

[p][p/]
ترتیب فرمت می توانید در هر قسمتی از رشته قرار گیرد، بنابراین شما می توانید یک مقدار را درون یک جمله جای دهید:
[/p]

[code]
>>> camels = 42
>>> 'I have spotted %d camels.' % camels
'I have spotted 42 camels.'
[/code]

[p][p/]
در صورتیکه بیشتر از یک فرمت درون رشته وجود داشته باشد، آرگومان دوم باید یک مقدار از نوع تاپل باشد. هر فرمت به ترتیب مطابق با یک المان از تاپل خواهد بود.
[/p]

[p][p/]
در مثال زیر از '%d' برای فرمت یک integer، از '%g' برای فرمت یک عدد اعشاری (نپرس چرا)، و از '%s' برای فرمت یک رشته استفاده شده است:
[/p]

[code]
>>> 'In %d years I have spotted %g %s.' % (3, 0.1, 'camels')
'In 3 years I have spotted 0.1 camels.'
[/code]

[p][p/]
تعداد المان های درون تاپل باید با تعداد فرمت های استفاده شده درون رشته مطابق باشد. همچنین، نوع المان ها نیز باید با فرمت ها یکی باشد:
[/p]

[code]
>>> '%d %d %d' % (1, 2)
TypeError: not enough arguments for format string
>>> '%d' % 'dollars'
TypeError: illegal argument type for built-in operation
[/code]

[p][p/]
در خط اول کد فوق، تعداد المان ها کافی نیستند، و در خط سوم نوع المان یک نوع اشتباه می باشد.
[/p]

[p][p/]
عملگر فرمت بسیار قدرتمند می باشد، ولی استفاده از آن می تواند کمی مشکل باشد. برای اطلاعات بیشتر در مورد این عملگر می توانید به [ل]href="http://docs.python.org/lib/typesseq-strings.html"[ل/]مستندات پایتون[/ل] مراجعه کنید.
[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]
