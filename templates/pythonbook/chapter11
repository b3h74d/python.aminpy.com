[h2][h2/]
فایل ها
[/h2]

[h3][h3/]
ماندگاری داده ها
[/h3]

[p][p/]
اغلب برنامه هایی که تا به حال دیده ایم برنامه هایی گذرا هستند، به این معنی که این برنامه ها برای مدت زمان کوتاهی اجرا می شوند و برای خود خروجی تولید می کنند، ولی وقتی برنامه به پایان می رسد، تمامی داده ها از بین می روند. در صورتی که برنامه را دوباره اجرا کنید، برنامه خالی از هرگونه داده خواهد بود.
[/p]

[p][p/]
ولی برنامه های دیگر به اصطلاح [ب]ماندگار[/ب] هستند: این برنامه ها حداقل برخی از داده های خود را درون یک مخزنی (به عنوان مثال، هارد درایو) ذخیره می کنند؛ و در صورتی که برنامه خاموش یا دوباره راه اندازی شود، داده های خود را برای استفاده در اختیار خواهند داشت.
[/p]

[p][p/]
از جمله برنامه های مانگار می تواند سیستم عامل ها را نام برد، که به خوبی تا هر زمان که کامپیوتر در روشن است اجرا می شوند، و وب سرور ها در تمام مدت در حال اجرا بوده و منتظر درخواست هایی که از شبکه می آید می باشند.
[/p]

[p][p/]
یکی از ساده ترین روش ها برای برنامه ها جهت مدیریت داده هایشان خواندن و نوشتن درون فایل متنی می باشد. پیش تر با برنامه هایی که فایل های متنی را می خوانند آشنا شده ایم؛ در این فصل با نوشتن بر روی فایل ها آشنا خواهید شد.
[/p]

[p][p/]
روش دیگر، ذخیره داده های یک برنامه درون یک دیتابیس می باشد. در این فصل یک دیتابیس ساده و یک ماژول به نام pickle را برای ذخیره داده های یک برنامه نشان خواهیم داد.
[/p]

[h3][h3/]
خواندن و نوشتن درون فایل
[/h3]

[p][p/]
فایل متنی ترتیبی از کارکترهای ذخیره شده در یک هارد دائمی مانند هارد درایو، فلش یا CD-ROM می باشد. نحوه باز کردن و خواندن فایل را در فصل بازی با کلمات آشنا شدیم.
[/p]

[p][p/]
برای نوشتن بر روی فایل، باید از 'w' به عنوان پارامتر دوم در تابع open استفاده کرد:
[/p]

[code]
>>> fout = open('output.txt', 'w')
>>> print fout
<open file 'output.txt', mode 'w' at 0xb7eb2410>
[/code]

[p][p/]
در صورتی که فایل مورد نظر وجود داشته باشد، باز کردن آن در حالت نوشتن ('w')، داده های قبلی را به طور کامل پاک کرده و یک فایل جدید را ایجاد می کند، بنابراین در این مورد باید کمی مواظب باشید! در صورتیکه فایل وجود نداشته باشد نیز یک فایل جدید ساخته می شود.
[/p]

[p][p/]
متد write داده ها را درون فایل قرار می دهد.
[/p]

[code]
>>> line1 = "This here's the wattle,\n"
>>> fout.write(line1)
[/code]

[p][p/]
آبجکت فایل جایی را که قرار دارد را درون خود نگه می دارد، بنابراین در صورتیکه متد write را دوباره فراخوانی کنید، داده مورد نظر دوباره به انتهای فایل اضافه می شود.
[/p]

[code]
>>> line2 = "the emblem of our land.\n"
>>> fout.write(line2)
[/code]

[p][p/]
هنگامی که نوشتن بر روی فایل خاتمه یافت، باید فایل را با استفاده از متد close ببندید.
[/p]

[code]
>>> fout.close()
[/code]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]

[p][p/]

[/p]
